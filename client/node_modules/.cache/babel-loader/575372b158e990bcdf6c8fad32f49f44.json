{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useEffect}from\"react\";import{reduxForm,SubmissionError}from\"redux-form\";import allActions from\"../redux/allActions\";import{useSelector,useDispatch,connect}from\"react-redux\";import validateForm from\"../formValidations/validations\";import ResetPassword from\"../components/ResetPassword\";var validate=function validate(values){return validateForm(values,\"resetpassword\");};var ResetPassCon=function ResetPassCon(props){var errorMessage=props.errorMessage,loading=props.loading,successMessage=props.successMessage,username=props.username;var dispatch=useDispatch();useEffect(function(){return function(){dispatch(allActions.forgotPassActions.clearUsername());};},[]);return/*#__PURE__*/_jsx(ResetPassword,{reduxFormProps:props,loading:loading,errorMessage:errorMessage,successMessage:successMessage});};function mapStateToProps(state){var _state$resetPass=state.resetPass,errorMessage=_state$resetPass.errorMessage,successMessage=_state$resetPass.successMessage,loading=_state$resetPass.loading,username=state.forgotPass.username;return{errorMessage:errorMessage,successMessage:successMessage,loading:loading,username:username};}function onSubmit(values,dispatch,props){values.username=props.username;return dispatch(allActions.resetPassActions.resetPassword(\"/reset-password\",values)).then(function(res){if(res.error){var errors=res.error.response.data.errors;if(errors){throw new SubmissionError(errors);}}else{dispatch(props.reset(\"resetPasswordForm\"));dispatch(allActions.forgotPassActions.clearUsername());}});}export default connect(mapStateToProps)(reduxForm({form:\"resetPasswordForm\",onSubmit:onSubmit,validate:validate})(ResetPassCon));","map":{"version":3,"sources":["/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/containers/ResetPassCon.js"],"names":["React","useEffect","reduxForm","SubmissionError","allActions","useSelector","useDispatch","connect","validateForm","ResetPassword","validate","values","ResetPassCon","props","errorMessage","loading","successMessage","username","dispatch","forgotPassActions","clearUsername","mapStateToProps","state","resetPass","forgotPass","onSubmit","resetPassActions","resetPassword","then","res","error","errors","response","data","reset","form"],"mappings":"2CAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,SAAT,CAAoBC,eAApB,KAA2C,YAA3C,CACA,MAAOC,CAAAA,UAAP,KAAuB,qBAAvB,CACA,OAASC,WAAT,CAAsBC,WAAtB,CAAmCC,OAAnC,KAAkD,aAAlD,CACA,MAAOC,CAAAA,YAAP,KAAyB,gCAAzB,CACA,MAAOC,CAAAA,aAAP,KAA0B,6BAA1B,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,MAAD,CAAY,CAC3B,MAAOH,CAAAA,YAAY,CAACG,MAAD,CAAS,eAAT,CAAnB,CACD,CAFD,CAGA,GAAIC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,IACtBC,CAAAA,YADsB,CAC8BD,KAD9B,CACtBC,YADsB,CACRC,OADQ,CAC8BF,KAD9B,CACRE,OADQ,CACCC,cADD,CAC8BH,KAD9B,CACCG,cADD,CACiBC,QADjB,CAC8BJ,KAD9B,CACiBI,QADjB,CAE5B,GAAIC,CAAAA,QAAQ,CAAGZ,WAAW,EAA1B,CACAL,SAAS,CAAC,UAAM,CACd,MAAO,WAAM,CACXiB,QAAQ,CAACd,UAAU,CAACe,iBAAX,CAA6BC,aAA7B,EAAD,CAAR,CACD,CAFD,CAGD,CAJQ,CAIN,EAJM,CAAT,CAMA,mBACE,KAAC,aAAD,EACE,cAAc,CAAEP,KADlB,CAEE,OAAO,CAAEE,OAFX,CAGE,YAAY,CAAED,YAHhB,CAIE,cAAc,CAAEE,cAJlB,EADF,CAQD,CAjBD,CAmBA,QAASK,CAAAA,eAAT,CAAyBC,KAAzB,CAAgC,sBAI1BA,KAJ0B,CAE5BC,SAF4B,CAEfT,YAFe,kBAEfA,YAFe,CAEDE,cAFC,kBAEDA,cAFC,CAEeD,OAFf,kBAEeA,OAFf,CAGdE,QAHc,CAI1BK,KAJ0B,CAG5BE,UAH4B,CAGdP,QAHc,CAK9B,MAAO,CACLH,YAAY,CAAEA,YADT,CAELE,cAAc,CAAEA,cAFX,CAGLD,OAAO,CAAEA,OAHJ,CAILE,QAAQ,CAAEA,QAJL,CAAP,CAMD,CAED,QAASQ,CAAAA,QAAT,CAAkBd,MAAlB,CAA0BO,QAA1B,CAAoCL,KAApC,CAA2C,CACzCF,MAAM,CAACM,QAAP,CAAkBJ,KAAK,CAACI,QAAxB,CACA,MAAOC,CAAAA,QAAQ,CACbd,UAAU,CAACsB,gBAAX,CAA4BC,aAA5B,CAA0C,iBAA1C,CAA6DhB,MAA7D,CADa,CAAR,CAELiB,IAFK,CAEA,SAACC,GAAD,CAAS,CACd,GAAIA,GAAG,CAACC,KAAR,CAAe,IACPC,CAAAA,MADO,CACIF,GAAG,CAACC,KAAJ,CAAUE,QAAV,CAAmBC,IADvB,CACPF,MADO,CAEb,GAAIA,MAAJ,CAAY,CACV,KAAM,IAAI5B,CAAAA,eAAJ,CAAoB4B,MAApB,CAAN,CACD,CACF,CALD,IAKO,CACLb,QAAQ,CAACL,KAAK,CAACqB,KAAN,CAAY,mBAAZ,CAAD,CAAR,CACAhB,QAAQ,CAACd,UAAU,CAACe,iBAAX,CAA6BC,aAA7B,EAAD,CAAR,CACD,CACF,CAZM,CAAP,CAaD,CAED,cAAeb,CAAAA,OAAO,CAACc,eAAD,CAAP,CACbnB,SAAS,CAAC,CACRiC,IAAI,CAAE,mBADE,CAERV,QAAQ,CAARA,QAFQ,CAGRf,QAAQ,CAARA,QAHQ,CAAD,CAAT,CAIGE,YAJH,CADa,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { reduxForm, SubmissionError } from \"redux-form\";\nimport allActions from \"../redux/allActions\";\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport validateForm from \"../formValidations/validations\";\nimport ResetPassword from \"../components/ResetPassword\";\n\nconst validate = (values) => {\n  return validateForm(values, \"resetpassword\");\n};\nlet ResetPassCon = (props) => {\n  let { errorMessage, loading, successMessage, username } = props;\n  let dispatch = useDispatch();\n  useEffect(() => {\n    return () => {\n      dispatch(allActions.forgotPassActions.clearUsername());\n    };\n  }, []);\n\n  return (\n    <ResetPassword\n      reduxFormProps={props}\n      loading={loading}\n      errorMessage={errorMessage}\n      successMessage={successMessage}\n    />\n  );\n};\n\nfunction mapStateToProps(state) {\n  let {\n    resetPass: { errorMessage, successMessage, loading },\n    forgotPass: { username },\n  } = state;\n  return {\n    errorMessage: errorMessage,\n    successMessage: successMessage,\n    loading: loading,\n    username: username,\n  };\n}\n\nfunction onSubmit(values, dispatch, props) {\n  values.username = props.username;\n  return dispatch(\n    allActions.resetPassActions.resetPassword(\"/reset-password\", values)\n  ).then((res) => {\n    if (res.error) {\n      let { errors } = res.error.response.data;\n      if (errors) {\n        throw new SubmissionError(errors);\n      }\n    } else {\n      dispatch(props.reset(\"resetPasswordForm\"));\n      dispatch(allActions.forgotPassActions.clearUsername());\n    }\n  });\n}\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: \"resetPasswordForm\",\n    onSubmit,\n    validate,\n  })(ResetPassCon)\n);\n"]},"metadata":{},"sourceType":"module"}