{"ast":null,"code":"import{CREATE_POST_REQUEST,CREATE_POST_SUCCESS,CREATE_POST_FAILURE,SET_IMAGE,REMOVE_IMAGE,DELETE_POST_REQUEST,DELETE_POST_SUCCESS,DELETE_POST_FAILURE,CLEAR,LIKE_POST_REQUEST,LIKE_POST_SUCCESS,LIKE_POST_FAILURE,ALL_POSTS_REQUEST,ALL_POSTS_SUCCESS,ALL_POSTS_FAILURE,CREATE_COMMENT_REQUEST,CREATE_COMMENT_SUCCESS,CREATE_COMMENT_FAILURE}from\"./postActionTypes\";var setImage=function setImage(image){return{type:SET_IMAGE,payload:image};};var removeImage=function removeImage(){return{type:REMOVE_IMAGE};};var createNewPost=function createNewPost(url,data,token){var formData=getFormData(data);return{types:[CREATE_POST_REQUEST,CREATE_POST_SUCCESS,CREATE_POST_FAILURE],payload:{client:\"default\",request:{url:url,method:\"post\",data:formData,headers:{Authorization:\"Bearer \".concat(token),\"Content-Type\":\"multipart/form-data\"}}}};};var deletePost=function deletePost(url,postId,token){return{types:[DELETE_POST_REQUEST,DELETE_POST_SUCCESS,DELETE_POST_FAILURE],payload:{client:\"default\",request:{url:url,data:{postId:postId},method:\"delete\",headers:{Authorization:\"Bearer \".concat(token)}}}};};var clearState=function clearState(){return{type:CLEAR};};var toggleLikePost=function toggleLikePost(url,postId,token){return{types:[LIKE_POST_REQUEST,LIKE_POST_SUCCESS,LIKE_POST_FAILURE],payload:{client:\"default\",request:{url:url,method:\"put\",data:{postId:postId},headers:{Authorization:\"Bearer \".concat(token)}}}};};var getAllPosts=function getAllPosts(url,token){return{types:[ALL_POSTS_REQUEST,ALL_POSTS_SUCCESS,ALL_POSTS_FAILURE],payload:{client:\"default\",request:{url:url,method:\"get\",headers:{Authorization:\"Bearer \".concat(token)}}}};};var createComment=function createComment(url,token,postId,comment){return{types:[CREATE_COMMENT_REQUEST,CREATE_COMMENT_SUCCESS,CREATE_COMMENT_FAILURE],payload:{client:\"default\",request:{url:url,method:\"post\",data:{postId:postId,comment:comment},headers:{Authorization:\"Bearer \".concat(token)}}}};};function getFormData(object){var formData=new FormData();for(var key in object){formData.append(key,object[key]);}return formData;}export default{createNewPost:createNewPost,deletePost:deletePost,clearState:clearState,toggleLikePost:toggleLikePost,getAllPosts:getAllPosts,setImage:setImage,removeImage:removeImage,createComment:createComment};","map":{"version":3,"sources":["/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/redux/post/postActions.js"],"names":["CREATE_POST_REQUEST","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","SET_IMAGE","REMOVE_IMAGE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","CLEAR","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","ALL_POSTS_REQUEST","ALL_POSTS_SUCCESS","ALL_POSTS_FAILURE","CREATE_COMMENT_REQUEST","CREATE_COMMENT_SUCCESS","CREATE_COMMENT_FAILURE","setImage","image","type","payload","removeImage","createNewPost","url","data","token","formData","getFormData","types","client","request","method","headers","Authorization","deletePost","postId","clearState","toggleLikePost","getAllPosts","createComment","comment","object","FormData","key","append"],"mappings":"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","sourcesContent":["import {\n  CREATE_POST_REQUEST,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAILURE,\n  SET_IMAGE,\n  REMOVE_IMAGE,\n  DELETE_POST_REQUEST,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_FAILURE,\n  CLEAR,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  ALL_POSTS_REQUEST,\n  ALL_POSTS_SUCCESS,\n  ALL_POSTS_FAILURE,\n  CREATE_COMMENT_REQUEST,\n  CREATE_COMMENT_SUCCESS,\n  CREATE_COMMENT_FAILURE\n} from \"./postActionTypes\";\n\nconst setImage = image => {\n  return {\n    type: SET_IMAGE,\n    payload: image\n  };\n};\nconst removeImage = () => {\n  return {\n    type: REMOVE_IMAGE\n  };\n};\nconst createNewPost = (url, data, token) => {\n  const formData = getFormData(data);\n  return {\n    types: [CREATE_POST_REQUEST, CREATE_POST_SUCCESS, CREATE_POST_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        method: \"post\",\n        data: formData,\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }\n    }\n  };\n};\n\nconst deletePost = (url, postId, token) => {\n  return {\n    types: [DELETE_POST_REQUEST, DELETE_POST_SUCCESS, DELETE_POST_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        data: { postId: postId },\n        method: \"delete\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  };\n};\n\nconst clearState = () => {\n  return {\n    type: CLEAR\n  };\n};\n\nconst toggleLikePost = (url, postId, token) => {\n  return {\n    types: [LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        method: \"put\",\n        data: { postId },\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  };\n};\n\nconst getAllPosts = (url, token) => {\n  return {\n    types: [ALL_POSTS_REQUEST, ALL_POSTS_SUCCESS, ALL_POSTS_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        method: \"get\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  };\n};\n\nconst createComment = (url, token, postId, comment) => {\n  return {\n    types: [\n      CREATE_COMMENT_REQUEST,\n      CREATE_COMMENT_SUCCESS,\n      CREATE_COMMENT_FAILURE\n    ],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        method: \"post\",\n        data: {\n          postId: postId,\n          comment: comment\n        },\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  };\n};\n\nfunction getFormData(object) {\n  let formData = new FormData();\n  for (var key in object) {\n    formData.append(key, object[key]);\n  }\n  return formData;\n}\nexport default {\n  createNewPost,\n  deletePost,\n  clearState,\n  toggleLikePost,\n  getAllPosts,\n  setImage,\n  removeImage,\n  createComment\n};\n"]},"metadata":{},"sourceType":"module"}