{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import React from\"react\";import{useSelector}from\"react-redux\";import{reduxForm,SubmissionError}from\"redux-form\";import allActions from\"../redux/allActions\";import Register from\"../components/Register\";import validateForm from\"../formValidations/validations\";var validate=function validate(values){return validateForm(values,\"register\");};var RegisterCon=function RegisterCon(props){var _useSelector=useSelector(function(_ref){var _ref$register=_ref.register,errorMessage=_ref$register.errorMessage,successMessage=_ref$register.successMessage,loading=_ref$register.loading;return{errorMessage:errorMessage,successMessage:successMessage,loading:loading};}),errorMessage=_useSelector.errorMessage,successMessage=_useSelector.successMessage,loading=_useSelector.loading;return/*#__PURE__*/_jsx(Register,{loading:loading,reduxFormProps:props,errorMessage:errorMessage,successMessage:successMessage});};var onSubmit=function onSubmit(values,dispatch,props){return dispatch(allActions.registerActions.registerUser(\"/register\",values)).then(function(res){if(res.error){var errors=res.error.response.data.errors;if(errors){throw new SubmissionError(errors);}}else{dispatch(props.reset(\"registerForm\"));}});};export default reduxForm({form:\"registerForm\",onSubmit:onSubmit,validate:validate})(RegisterCon);","map":{"version":3,"sources":["/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/containers/RegisterCon.js"],"names":["React","useSelector","reduxForm","SubmissionError","allActions","Register","validateForm","validate","values","RegisterCon","props","register","errorMessage","successMessage","loading","onSubmit","dispatch","registerActions","registerUser","then","res","error","errors","response","data","reset","form"],"mappings":"2CAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,SAAT,CAAoBC,eAApB,KAA2C,YAA3C,CACA,MAAOC,CAAAA,UAAP,KAAuB,qBAAvB,CACA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gCAAzB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,MAAD,CAAY,CAC3B,MAAOF,CAAAA,YAAY,CAACE,MAAD,CAAS,UAAT,CAAnB,CACD,CAFD,CAIA,GAAIC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,kBACuBT,WAAW,CAC3D,sCAAGU,QAAH,CAAeC,YAAf,eAAeA,YAAf,CAA6BC,cAA7B,eAA6BA,cAA7B,CAA6CC,OAA7C,eAA6CA,OAA7C,OAA8D,CAC5DF,YAAY,CAAZA,YAD4D,CAE5DC,cAAc,CAAdA,cAF4D,CAG5DC,OAAO,CAAPA,OAH4D,CAA9D,EAD2D,CADlC,CACnBF,YADmB,cACnBA,YADmB,CACLC,cADK,cACLA,cADK,CACWC,OADX,cACWA,OADX,CAS3B,mBACE,KAAC,QAAD,EACE,OAAO,CAAEA,OADX,CAEE,cAAc,CAAEJ,KAFlB,CAGE,YAAY,CAAEE,YAHhB,CAIE,cAAc,CAAEC,cAJlB,EADF,CAQD,CAjBD,CAmBA,GAAME,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACP,MAAD,CAASQ,QAAT,CAAmBN,KAAnB,CAA6B,CAC5C,MAAOM,CAAAA,QAAQ,CACbZ,UAAU,CAACa,eAAX,CAA2BC,YAA3B,CAAwC,WAAxC,CAAqDV,MAArD,CADa,CAAR,CAELW,IAFK,CAEA,SAACC,GAAD,CAAS,CACd,GAAIA,GAAG,CAACC,KAAR,CAAe,IACPC,CAAAA,MADO,CACIF,GAAG,CAACC,KAAJ,CAAUE,QAAV,CAAmBC,IADvB,CACPF,MADO,CAEb,GAAIA,MAAJ,CAAY,CACV,KAAM,IAAInB,CAAAA,eAAJ,CAAoBmB,MAApB,CAAN,CACD,CACF,CALD,IAKO,CACLN,QAAQ,CAACN,KAAK,CAACe,KAAN,CAAY,cAAZ,CAAD,CAAR,CACD,CACF,CAXM,CAAP,CAYD,CAbD,CAeA,cAAevB,CAAAA,SAAS,CAAC,CACvBwB,IAAI,CAAE,cADiB,CAEvBX,QAAQ,CAARA,QAFuB,CAGvBR,QAAQ,CAARA,QAHuB,CAAD,CAAT,CAIZE,WAJY,CAAf","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { reduxForm, SubmissionError } from \"redux-form\";\nimport allActions from \"../redux/allActions\";\nimport Register from \"../components/Register\";\nimport validateForm from \"../formValidations/validations\";\n\nconst validate = (values) => {\n  return validateForm(values, \"register\");\n};\n\nlet RegisterCon = (props) => {\n  const { errorMessage, successMessage, loading } = useSelector(\n    ({ register: { errorMessage, successMessage, loading } }) => ({\n      errorMessage,\n      successMessage,\n      loading,\n    })\n  );\n\n  return (\n    <Register\n      loading={loading}\n      reduxFormProps={props}\n      errorMessage={errorMessage}\n      successMessage={successMessage}\n    />\n  );\n};\n\nconst onSubmit = (values, dispatch, props) => {\n  return dispatch(\n    allActions.registerActions.registerUser(\"/register\", values)\n  ).then((res) => {\n    if (res.error) {\n      let { errors } = res.error.response.data;\n      if (errors) {\n        throw new SubmissionError(errors);\n      }\n    } else {\n      dispatch(props.reset(\"registerForm\"));\n    }\n  });\n};\n\nexport default reduxForm({\n  form: \"registerForm\",\n  onSubmit,\n  validate,\n})(RegisterCon);\n"]},"metadata":{},"sourceType":"module"}