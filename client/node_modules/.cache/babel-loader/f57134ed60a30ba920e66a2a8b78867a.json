{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/containers/CreatePostCon.js\";\nimport React, { useEffect } from \"react\";\nimport { reduxForm } from \"redux-form\";\nimport { connect, useDispatch } from \"react-redux\";\nimport allActions from \"../redux/allActions\";\nimport CreatePost from \"../components/CreatePost\";\nimport validateForm from \"../formValidations/validations\";\n\nconst validate = values => {\n  return validateForm(values, \"createpost\");\n};\n\nlet CreatePostCon = props => {\n  return /*#__PURE__*/_jsxDEV(CreatePost, {\n    props: props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n};\n\n_c = CreatePostCon;\n\nconst onSubmit = (values, dispatch, props) => {\n  values.postImage = props.image;\n  dispatch(allActions.postActions.createNewPost(\"/user/post/create\", values, props.token)).then(res => {\n    if (!res.error) props.history.push(\"/\");\n  });\n};\n\nconst mapStateToProps = (state, props) => {\n  let {\n    errorMessage,\n    loading,\n    image,\n    imageUrl\n  } = state.post;\n  return {\n    errorMessage: errorMessage,\n    loading: loading,\n    token: state.userProfile.token,\n    image: image,\n    imageUrl: imageUrl\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleImageUpload: image => {\n      console.log(image);\n      dispatch(allActions.postActions.setImage(image));\n    },\n    removeImage: () => {\n      dispatch(allActions.postActions.removeImage());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(reduxForm({\n  form: \"createPostForm\",\n  onSubmit,\n  validate\n})(CreatePostCon));\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePostCon\");","map":{"version":3,"sources":["/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/containers/CreatePostCon.js"],"names":["React","useEffect","reduxForm","connect","useDispatch","allActions","CreatePost","validateForm","validate","values","CreatePostCon","props","onSubmit","dispatch","postImage","image","postActions","createNewPost","token","then","res","error","history","push","mapStateToProps","state","errorMessage","loading","imageUrl","post","userProfile","mapDispatchToProps","handleImageUpload","console","log","setImage","removeImage","form"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AAC3B,SAAOF,YAAY,CAACE,MAAD,EAAS,YAAT,CAAnB;AACD,CAFD;;AAIA,IAAIC,aAAa,GAAIC,KAAD,IAAW;AAC7B,sBAAO,QAAC,UAAD;AAAY,IAAA,KAAK,EAAEA;AAAnB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAFD;;KAAID,a;;AAIJ,MAAME,QAAQ,GAAG,CAACH,MAAD,EAASI,QAAT,EAAmBF,KAAnB,KAA6B;AAC5CF,EAAAA,MAAM,CAACK,SAAP,GAAmBH,KAAK,CAACI,KAAzB;AACAF,EAAAA,QAAQ,CACNR,UAAU,CAACW,WAAX,CAAuBC,aAAvB,CACE,mBADF,EAEER,MAFF,EAGEE,KAAK,CAACO,KAHR,CADM,CAAR,CAMEC,IANF,CAMQC,GAAD,IAAS;AACd,QAAI,CAACA,GAAG,CAACC,KAAT,EAAgBV,KAAK,CAACW,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACjB,GARD;AASD,CAXD;;AAaA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQd,KAAR,KAAkB;AACxC,MAAI;AAAEe,IAAAA,YAAF;AAAgBC,IAAAA,OAAhB;AAAyBZ,IAAAA,KAAzB;AAAgCa,IAAAA;AAAhC,MAA6CH,KAAK,CAACI,IAAvD;AACA,SAAO;AACLH,IAAAA,YAAY,EAAEA,YADT;AAELC,IAAAA,OAAO,EAAEA,OAFJ;AAGLT,IAAAA,KAAK,EAAEO,KAAK,CAACK,WAAN,CAAkBZ,KAHpB;AAILH,IAAAA,KAAK,EAAEA,KAJF;AAKLa,IAAAA,QAAQ,EAAEA;AALL,GAAP;AAOD,CATD;;AAWA,MAAMG,kBAAkB,GAAIlB,QAAD,IAAc;AACvC,SAAO;AACLmB,IAAAA,iBAAiB,EAAGjB,KAAD,IAAW;AAC5BkB,MAAAA,OAAO,CAACC,GAAR,CAAYnB,KAAZ;AACAF,MAAAA,QAAQ,CAACR,UAAU,CAACW,WAAX,CAAuBmB,QAAvB,CAAgCpB,KAAhC,CAAD,CAAR;AACD,KAJI;AAKLqB,IAAAA,WAAW,EAAE,MAAM;AACjBvB,MAAAA,QAAQ,CAACR,UAAU,CAACW,WAAX,CAAuBoB,WAAvB,EAAD,CAAR;AACD;AAPI,GAAP;AASD,CAVD;;AAYA,eAAejC,OAAO,CACpBqB,eADoB,EAEpBO,kBAFoB,CAAP,CAIb7B,SAAS,CAAC;AACRmC,EAAAA,IAAI,EAAE,gBADE;AAERzB,EAAAA,QAFQ;AAGRJ,EAAAA;AAHQ,CAAD,CAAT,CAIGE,aAJH,CAJa,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { reduxForm } from \"redux-form\";\nimport { connect, useDispatch } from \"react-redux\";\nimport allActions from \"../redux/allActions\";\nimport CreatePost from \"../components/CreatePost\";\nimport validateForm from \"../formValidations/validations\";\n\nconst validate = (values) => {\n  return validateForm(values, \"createpost\");\n};\n\nlet CreatePostCon = (props) => {\n  return <CreatePost props={props} />;\n};\n\nconst onSubmit = (values, dispatch, props) => {\n  values.postImage = props.image;\n  dispatch(\n    allActions.postActions.createNewPost(\n      \"/user/post/create\",\n      values,\n      props.token\n    )\n  ).then((res) => {\n    if (!res.error) props.history.push(\"/\");\n  });\n};\n\nconst mapStateToProps = (state, props) => {\n  let { errorMessage, loading, image, imageUrl } = state.post;\n  return {\n    errorMessage: errorMessage,\n    loading: loading,\n    token: state.userProfile.token,\n    image: image,\n    imageUrl: imageUrl,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    handleImageUpload: (image) => {\n      console.log(image);\n      dispatch(allActions.postActions.setImage(image));\n    },\n    removeImage: () => {\n      dispatch(allActions.postActions.removeImage());\n    },\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(\n  reduxForm({\n    form: \"createPostForm\",\n    onSubmit,\n    validate,\n  })(CreatePostCon)\n);\n"]},"metadata":{},"sourceType":"module"}