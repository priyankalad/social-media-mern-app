{"ast":null,"code":"import { REQUEST, SUCCESS, FAILURE } from \"./accVerifyActions\";\nconst initialState = {\n  loading: false,\n  errorMessage: \"\",\n  successMessage: \"\"\n};\n\nconst accVerifyReducer = (state = initialState, action) => {\n  let {\n    type,\n    payload,\n    error\n  } = action;\n\n  switch (type) {\n    case REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case SUCCESS:\n      return {\n        loading: false,\n        successMessage: payload.data.message,\n        errorMessage: \"\"\n      };\n\n    case FAILURE:\n      return {\n        loading: false,\n        successMessage: \"\",\n        errorMessage: error.data\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default accVerifyReducer;","map":{"version":3,"sources":["/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/redux/accountVerification/accVerifyReducer.js"],"names":["REQUEST","SUCCESS","FAILURE","initialState","loading","errorMessage","successMessage","accVerifyReducer","state","action","type","payload","error","data","message"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,OAA3B,QAA0C,oBAA1C;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,YAAY,EAAE,EAFK;AAGnBC,EAAAA,cAAc,EAAE;AAHG,CAArB;;AAMA,MAAMC,gBAAgB,GAAG,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AACzD,MAAI;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAA2BH,MAA/B;;AACA,UAAQC,IAAR;AACE,SAAKV,OAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELJ,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKH,OAAL;AACE,aAAO;AACLG,QAAAA,OAAO,EAAE,KADJ;AAELE,QAAAA,cAAc,EAAEK,OAAO,CAACE,IAAR,CAAaC,OAFxB;AAGLT,QAAAA,YAAY,EAAE;AAHT,OAAP;;AAKF,SAAKH,OAAL;AACE,aAAO;AACLE,QAAAA,OAAO,EAAE,KADJ;AAELE,QAAAA,cAAc,EAAE,EAFX;AAGLD,QAAAA,YAAY,EAAEO,KAAK,CAACC;AAHf,OAAP;;AAKF;AACE,aAAOL,KAAP;AAnBJ;AAqBD,CAvBD;;AAyBA,eAAeD,gBAAf","sourcesContent":["import { REQUEST, SUCCESS, FAILURE } from \"./accVerifyActions\";\n\nconst initialState = {\n  loading: false,\n  errorMessage: \"\",\n  successMessage: \"\"\n};\n\nconst accVerifyReducer = (state = initialState, action) => {\n  let { type, payload, error } = action;\n  switch (type) {\n    case REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    case SUCCESS:\n      return {\n        loading: false,\n        successMessage: payload.data.message,\n        errorMessage: \"\"\n      };\n    case FAILURE:\n      return {\n        loading: false,\n        successMessage: \"\",\n        errorMessage: error.data\n      };\n    default:\n      return state;\n  }\n};\n\nexport default accVerifyReducer;\n"]},"metadata":{},"sourceType":"module"}