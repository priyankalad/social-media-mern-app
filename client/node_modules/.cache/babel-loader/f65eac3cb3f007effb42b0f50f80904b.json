{"ast":null,"code":"import { CREATE_POST_REQUEST, CREATE_POST_SUCCESS, CREATE_POST_FAILURE, SET_IMAGE, REMOVE_IMAGE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, DELETE_POST_FAILURE, CLEAR, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, ALL_POSTS_REQUEST, ALL_POSTS_SUCCESS, ALL_POSTS_FAILURE, CREATE_COMMENT_REQUEST, CREATE_COMMENT_SUCCESS, CREATE_COMMENT_FAILURE } from \"./postActionTypes\";\n\nconst setImage = image => {\n  return {\n    type: SET_IMAGE,\n    payload: image\n  };\n};\n\nconst removeImage = () => {\n  return {\n    type: REMOVE_IMAGE\n  };\n};\n\nconst createNewPost = (url, data, token) => {\n  const formData = getFormData(data);\n  return {\n    types: [CREATE_POST_REQUEST, CREATE_POST_SUCCESS, CREATE_POST_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        method: \"post\",\n        data: formData,\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }\n    }\n  };\n};\n\nconst deletePost = (url, postId, token) => {\n  return {\n    types: [DELETE_POST_REQUEST, DELETE_POST_SUCCESS, DELETE_POST_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        data: {\n          postId: postId\n        },\n        method: \"delete\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  };\n};\n\nconst clearState = () => {\n  return {\n    type: CLEAR\n  };\n};\n\nconst toggleLikePost = (url, postId, token) => {\n  return {\n    types: [LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        method: \"put\",\n        data: {\n          postId\n        },\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  };\n};\n\nconst getAllPosts = (url, token) => {\n  return {\n    types: [ALL_POSTS_REQUEST, ALL_POSTS_SUCCESS, ALL_POSTS_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        method: \"get\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  };\n};\n\nconst createComment = (url, token, postId, comment) => {\n  return {\n    types: [CREATE_COMMENT_REQUEST, CREATE_COMMENT_SUCCESS, CREATE_COMMENT_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        method: \"post\",\n        data: {\n          postId: postId,\n          comment: comment\n        },\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  };\n};\n\nfunction getFormData(object) {\n  let formData = new FormData();\n\n  for (var key in object) {\n    formData.append(key, object[key]);\n  }\n\n  return formData;\n}\n\nexport default {\n  createNewPost,\n  deletePost,\n  clearState,\n  toggleLikePost,\n  getAllPosts,\n  setImage,\n  removeImage,\n  createComment\n};","map":{"version":3,"sources":["/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/redux/post/postActions.js"],"names":["CREATE_POST_REQUEST","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","SET_IMAGE","REMOVE_IMAGE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","CLEAR","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","ALL_POSTS_REQUEST","ALL_POSTS_SUCCESS","ALL_POSTS_FAILURE","CREATE_COMMENT_REQUEST","CREATE_COMMENT_SUCCESS","CREATE_COMMENT_FAILURE","setImage","image","type","payload","removeImage","createNewPost","url","data","token","formData","getFormData","types","client","request","method","headers","Authorization","deletePost","postId","clearState","toggleLikePost","getAllPosts","createComment","comment","object","FormData","key","append"],"mappings":"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","sourcesContent":["import {\n  CREATE_POST_REQUEST,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAILURE,\n  SET_IMAGE,\n  REMOVE_IMAGE,\n  DELETE_POST_REQUEST,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_FAILURE,\n  CLEAR,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  ALL_POSTS_REQUEST,\n  ALL_POSTS_SUCCESS,\n  ALL_POSTS_FAILURE,\n  CREATE_COMMENT_REQUEST,\n  CREATE_COMMENT_SUCCESS,\n  CREATE_COMMENT_FAILURE\n} from \"./postActionTypes\";\n\nconst setImage = image => {\n  return {\n    type: SET_IMAGE,\n    payload: image\n  };\n};\nconst removeImage = () => {\n  return {\n    type: REMOVE_IMAGE\n  };\n};\nconst createNewPost = (url, data, token) => {\n  const formData = getFormData(data);\n  return {\n    types: [CREATE_POST_REQUEST, CREATE_POST_SUCCESS, CREATE_POST_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        method: \"post\",\n        data: formData,\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }\n    }\n  };\n};\n\nconst deletePost = (url, postId, token) => {\n  return {\n    types: [DELETE_POST_REQUEST, DELETE_POST_SUCCESS, DELETE_POST_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        data: { postId: postId },\n        method: \"delete\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  };\n};\n\nconst clearState = () => {\n  return {\n    type: CLEAR\n  };\n};\n\nconst toggleLikePost = (url, postId, token) => {\n  return {\n    types: [LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        method: \"put\",\n        data: { postId },\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  };\n};\n\nconst getAllPosts = (url, token) => {\n  return {\n    types: [ALL_POSTS_REQUEST, ALL_POSTS_SUCCESS, ALL_POSTS_FAILURE],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        method: \"get\",\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  };\n};\n\nconst createComment = (url, token, postId, comment) => {\n  return {\n    types: [\n      CREATE_COMMENT_REQUEST,\n      CREATE_COMMENT_SUCCESS,\n      CREATE_COMMENT_FAILURE\n    ],\n    payload: {\n      client: \"default\",\n      request: {\n        url: url,\n        method: \"post\",\n        data: {\n          postId: postId,\n          comment: comment\n        },\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }\n    }\n  };\n};\n\nfunction getFormData(object) {\n  let formData = new FormData();\n  for (var key in object) {\n    formData.append(key, object[key]);\n  }\n  return formData;\n}\nexport default {\n  createNewPost,\n  deletePost,\n  clearState,\n  toggleLikePost,\n  getAllPosts,\n  setImage,\n  removeImage,\n  createComment\n};\n"]},"metadata":{},"sourceType":"module"}