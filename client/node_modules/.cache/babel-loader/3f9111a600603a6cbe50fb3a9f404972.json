{"ast":null,"code":"import { CREATE_POST_REQUEST, CREATE_POST_SUCCESS, SET_IMAGE, REMOVE_IMAGE, ALL_POSTS_SUCCESS, ALL_POSTS_REQUEST, LIKE_POST_SUCCESS, ALL_POSTS_FAILURE, LIKE_POST_REQUEST, LIKE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, DELETE_POST_FAILURE, CREATE_COMMENT_REQUEST, CREATE_COMMENT_SUCCESS, CREATE_COMMENT_FAILURE } from \"./postActionTypes\";\nconst initialState = {\n  loading: false,\n  smallLoading: false,\n  successMessage: \"\",\n  errorMessage: \"\",\n  image: null,\n  imageUrl: \"\",\n  posts: [],\n  likedCount: 0,\n  postId: \"\"\n};\n\nconst postReducer = (state = initialState, action) => {\n  let {\n    type,\n    payload,\n    error\n  } = action;\n\n  switch (type) {\n    case CREATE_POST_REQUEST:\n    case ALL_POSTS_REQUEST:\n    case CREATE_COMMENT_REQUEST:\n      return { ...state,\n        loading: true\n      };\n\n    case CREATE_POST_SUCCESS:\n      return { ...state,\n        loading: false,\n        image: null,\n        imageURL: \"\"\n      };\n\n    case SET_IMAGE:\n      let imageURL = URL.createObjectURL(payload);\n      return { ...state,\n        image: payload,\n        imageUrl: imageURL\n      };\n\n    case REMOVE_IMAGE:\n      return { ...state,\n        image: null,\n        imageUrl: \"\"\n      };\n\n    case ALL_POSTS_SUCCESS:\n      return { ...state,\n        loading: false,\n        posts: payload.data.posts\n      };\n\n    case ALL_POSTS_FAILURE:\n      return { ...state,\n        loading: false,\n        errorMessage: error.response.data.error\n      };\n\n    case LIKE_POST_SUCCESS:\n      let {\n        post,\n        likedPost\n      } = payload.data;\n      return { ...state,\n        //  smallLoading: false,\n        posts: updatedPostsAfterToggle([...state.posts], post),\n        likedCount: likedPost,\n        postId: \"\"\n      };\n\n    case LIKE_POST_FAILURE:\n      return { ...state,\n        likedSuccess: \"\",\n        smallLoading: false,\n        errorMessage: error.data,\n        postId: \"\"\n      };\n\n    case DELETE_POST_REQUEST:\n    case LIKE_POST_REQUEST:\n      return { ...state,\n        smallLoading: true,\n        postId: payload.request.data.postId\n      };\n\n    case DELETE_POST_SUCCESS:\n      let {\n        deletedPostId\n      } = payload.data;\n      return { ...state,\n        smallLoading: false,\n        posts: [...state.posts].filter(p => p._id !== deletedPostId),\n        postId: \"\"\n      };\n\n    case DELETE_POST_FAILURE:\n      return { ...state,\n        smallLoading: false,\n        errorMessage: error.response.data.message,\n        postId: \"\"\n      };\n\n    case CREATE_COMMENT_SUCCESS:\n      return { ...state,\n        loading: false,\n        posts: updatePostsAfterComment([...state.posts], payload.data.post)\n      };\n\n    case CREATE_COMMENT_FAILURE:\n      return { ...state,\n        loading: false,\n        errorMessage: error.response.data.message\n      };\n\n    default:\n      return state;\n  }\n};\n\nlet updatePostsAfterComment = (posts, post) => {\n  let postIndex = posts.findIndex(p => p._id === post._id);\n  posts[postIndex] = post;\n  return posts;\n};\n\nlet updatedPostsAfterToggle = (posts, post) => {\n  posts.some(p => {\n    if (p._id === post._id) {\n      p.liked = post.liked;\n      p.likedByUsers = post.likedByUsers;\n      return true;\n    }\n\n    return false;\n  });\n  return posts;\n};\n\nexport default postReducer;","map":{"version":3,"sources":["/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/redux/post/postReducer.js"],"names":["CREATE_POST_REQUEST","CREATE_POST_SUCCESS","SET_IMAGE","REMOVE_IMAGE","ALL_POSTS_SUCCESS","ALL_POSTS_REQUEST","LIKE_POST_SUCCESS","ALL_POSTS_FAILURE","LIKE_POST_REQUEST","LIKE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","CREATE_COMMENT_REQUEST","CREATE_COMMENT_SUCCESS","CREATE_COMMENT_FAILURE","initialState","loading","smallLoading","successMessage","errorMessage","image","imageUrl","posts","likedCount","postId","postReducer","state","action","type","payload","error","imageURL","URL","createObjectURL","data","response","post","likedPost","updatedPostsAfterToggle","likedSuccess","request","deletedPostId","filter","p","_id","message","updatePostsAfterComment","postIndex","findIndex","some","liked","likedByUsers"],"mappings":"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","sourcesContent":["import {\n  CREATE_POST_REQUEST,\n  CREATE_POST_SUCCESS,\n  SET_IMAGE,\n  REMOVE_IMAGE,\n  ALL_POSTS_SUCCESS,\n  ALL_POSTS_REQUEST,\n  LIKE_POST_SUCCESS,\n  ALL_POSTS_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_FAILURE,\n  DELETE_POST_REQUEST,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_FAILURE,\n  CREATE_COMMENT_REQUEST,\n  CREATE_COMMENT_SUCCESS,\n  CREATE_COMMENT_FAILURE\n} from \"./postActionTypes\";\n\nconst initialState = {\n  loading: false,\n  smallLoading: false,\n  successMessage: \"\",\n  errorMessage: \"\",\n  image: null,\n  imageUrl: \"\",\n  posts: [],\n  likedCount: 0,\n  postId: \"\"\n};\n\nconst postReducer = (state = initialState, action) => {\n  let { type, payload, error } = action;\n  switch (type) {\n    case CREATE_POST_REQUEST:\n    case ALL_POSTS_REQUEST:\n    case CREATE_COMMENT_REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    case CREATE_POST_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        image: null,\n        imageURL: \"\"\n      };\n    case SET_IMAGE:\n      let imageURL = URL.createObjectURL(payload);\n      return {\n        ...state,\n        image: payload,\n        imageUrl: imageURL\n      };\n    case REMOVE_IMAGE:\n      return {\n        ...state,\n        image: null,\n        imageUrl: \"\"\n      };\n    case ALL_POSTS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        posts: payload.data.posts\n      };\n    case ALL_POSTS_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        errorMessage: error.response.data.error\n      };\n    case LIKE_POST_SUCCESS:\n      let { post, likedPost } = payload.data;\n      return {\n        ...state,\n        //  smallLoading: false,\n        posts: updatedPostsAfterToggle([...state.posts], post),\n        likedCount: likedPost,\n        postId: \"\"\n      };\n    case LIKE_POST_FAILURE:\n      return {\n        ...state,\n        likedSuccess: \"\",\n        smallLoading: false,\n        errorMessage: error.data,\n        postId: \"\"\n      };\n    case DELETE_POST_REQUEST:\n    case LIKE_POST_REQUEST:\n      return {\n        ...state,\n        smallLoading: true,\n        postId: payload.request.data.postId\n      };\n    case DELETE_POST_SUCCESS:\n      let { deletedPostId } = payload.data;\n      return {\n        ...state,\n        smallLoading: false,\n        posts: [...state.posts].filter(p => p._id !== deletedPostId),\n        postId: \"\"\n      };\n    case DELETE_POST_FAILURE:\n      return {\n        ...state,\n        smallLoading: false,\n        errorMessage: error.response.data.message,\n        postId: \"\"\n      };\n    case CREATE_COMMENT_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        posts: updatePostsAfterComment([...state.posts], payload.data.post)\n      };\n    case CREATE_COMMENT_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        errorMessage: error.response.data.message\n      };\n    default:\n      return state;\n  }\n};\n\nlet updatePostsAfterComment = (posts, post) => {\n  let postIndex = posts.findIndex(p => p._id === post._id);\n  posts[postIndex] = post;\n  return posts;\n};\n\nlet updatedPostsAfterToggle = (posts, post) => {\n  posts.some(p => {\n    if (p._id === post._id) {\n      p.liked = post.liked;\n      p.likedByUsers = post.likedByUsers;\n      return true;\n    }\n    return false;\n  });\n  return posts;\n};\n\nexport default postReducer;\n"]},"metadata":{},"sourceType":"module"}