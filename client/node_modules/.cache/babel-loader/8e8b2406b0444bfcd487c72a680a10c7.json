{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/containers/EditProfileCon.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { reduxForm, SubmissionError } from \"redux-form\";\nimport { useDispatch, connect } from \"react-redux\";\nimport allActions from \"../redux/allActions\";\nimport Loading from \"../components/Loading\";\nimport \"../index.css\";\nimport validateForm from \"../formValidations/validations\";\nimport EditProfile from \"../components/EditProfile\";\nimport ViewProfile from \"../components/ViewProfile\";\nimport ProfileHeader from \"../components/ProfileHeader\";\n\nconst validate = values => {\n  return validateForm(values, \"editprofile\");\n};\n\nfunction EditProfileCon(props) {\n  _s();\n\n  const dispatch = useDispatch();\n  const {\n    handleSubmit,\n    reset,\n    token,\n    loading,\n    errorMessage,\n    viewMode,\n    deleteSuccess\n  } = props;\n\n  if (deleteSuccess) {\n    dispatch(allActions.userProfileActions.logout());\n    props.history.push(\"/login\");\n  }\n\n  let changeViewModeHandler = viewMode => dispatch(allActions.userProfileActions.changeViewMode(viewMode));\n\n  let fileChangeHandler = event => {\n    let selectedFile = event.target.files[0];\n    dispatch(allActions.userProfileActions.uploadImage(selectedFile));\n  };\n\n  let deleteProfileHandler = e => {\n    e.preventDefault();\n\n    if (window.confirm(\"Are you sure, you want to delete the profile?\")) {\n      dispatch(allActions.userProfileActions.deleteProfile(\"/user/delete\", token));\n    } else return false;\n  };\n\n  let genderOptions = {\n    male: {\n      label: \"Male\",\n      selected: false\n    },\n    female: {\n      label: \"Female\",\n      selected: false\n    },\n    other: {\n      label: \"Other\",\n      selected: false\n    }\n  };\n  const image_style = {\n    width: \"130px\",\n    height: \"130px\",\n    borderRadius: \"50%\"\n  };\n\n  let editForm = /*#__PURE__*/_jsxDEV(EditProfile, {\n    reset: reset,\n    errorMessage: errorMessage,\n    handleSubmit: handleSubmit,\n    changeViewModeHandler: changeViewModeHandler,\n    fileChangeHandler: fileChangeHandler,\n    imageStyle: image_style,\n    deleteProfileHandler: deleteProfileHandler,\n    user: props.initialValues,\n    updatedImageFileURL: props.updatedImageFileURL,\n    genderOptions: genderOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n\n  let viewForm = /*#__PURE__*/_jsxDEV(ViewProfile, {\n    user: props.initialValues,\n    imageStyle: image_style,\n    genderOptions: genderOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n\n  useEffect(() => {\n    dispatch(allActions.userProfileActions.getUserProfile(\"/user/profile\", token));\n    return () => {\n      changeViewModeHandler(\"view\");\n    };\n  }, [dispatch, token]);\n  return loading ? /*#__PURE__*/_jsxDEV(Loading, {\n    isLoading: loading\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ProfileHeader, {\n      viewMode: viewMode,\n      changeViewModeHandler: changeViewModeHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), viewMode === \"edit\" ? editForm : viewForm]\n  }, void 0, true);\n}\n\n_s(EditProfileCon, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = EditProfileCon;\n\nconst onSubmit = (values, dispatch, props) => {\n  let {\n    token,\n    updatedImageFile\n  } = props;\n  if (updatedImageFile) values.profilePic = updatedImageFile;\n  return dispatch(allActions.userProfileActions.editUserProfile(\"/user/profile\", values, token)).then(res => {\n    if (res.error) {\n      let {\n        errors\n      } = res.error.response.data;\n\n      if (errors) {\n        throw new SubmissionError(errors);\n      }\n    }\n  });\n};\n\nconst mapStateToProps = (state, props) => {\n  let {\n    user,\n    updatedImageFile,\n    updatedImageFileURL,\n    errorMessage,\n    loading,\n    viewMode,\n    successMessage: deleteSuccess\n  } = state.userProfile;\n  return {\n    initialValues: user,\n    updatedImageFile: updatedImageFile,\n    updatedImageFileURL: updatedImageFileURL,\n    token: state.userProfile.token,\n    errorMessage: errorMessage,\n    loading: loading,\n    viewMode: viewMode,\n    deleteSuccess: deleteSuccess,\n    deleteError: errorMessage\n  };\n};\n\nexport default connect(mapStateToProps)(reduxForm({\n  form: \"editProfile\",\n  enableReinitialize: true,\n  onSubmit,\n  validate\n})(EditProfileCon));\n\nvar _c;\n\n$RefreshReg$(_c, \"EditProfileCon\");","map":{"version":3,"sources":["/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/containers/EditProfileCon.js"],"names":["React","useEffect","reduxForm","SubmissionError","useDispatch","connect","allActions","Loading","validateForm","EditProfile","ViewProfile","ProfileHeader","validate","values","EditProfileCon","props","dispatch","handleSubmit","reset","token","loading","errorMessage","viewMode","deleteSuccess","userProfileActions","logout","history","push","changeViewModeHandler","changeViewMode","fileChangeHandler","event","selectedFile","target","files","uploadImage","deleteProfileHandler","e","preventDefault","window","confirm","deleteProfile","genderOptions","male","label","selected","female","other","image_style","width","height","borderRadius","editForm","initialValues","updatedImageFileURL","viewForm","getUserProfile","onSubmit","updatedImageFile","profilePic","editUserProfile","then","res","error","errors","response","data","mapStateToProps","state","user","successMessage","userProfile","deleteError","form","enableReinitialize"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { reduxForm, SubmissionError } from \"redux-form\";\nimport { useDispatch, connect } from \"react-redux\";\nimport allActions from \"../redux/allActions\";\nimport Loading from \"../components/Loading\";\n\nimport \"../index.css\";\nimport validateForm from \"../formValidations/validations\";\nimport EditProfile from \"../components/EditProfile\";\nimport ViewProfile from \"../components/ViewProfile\";\nimport ProfileHeader from \"../components/ProfileHeader\";\n\nconst validate = (values) => {\n  return validateForm(values, \"editprofile\");\n};\nfunction EditProfileCon(props) {\n  const dispatch = useDispatch();\n  const {\n    handleSubmit,\n    reset,\n    token,\n    loading,\n    errorMessage,\n    viewMode,\n    deleteSuccess,\n  } = props;\n  if (deleteSuccess) {\n    dispatch(allActions.userProfileActions.logout());\n    props.history.push(\"/login\");\n  }\n  let changeViewModeHandler = (viewMode) =>\n    dispatch(allActions.userProfileActions.changeViewMode(viewMode));\n  let fileChangeHandler = (event) => {\n    let selectedFile = event.target.files[0];\n    dispatch(allActions.userProfileActions.uploadImage(selectedFile));\n  };\n  let deleteProfileHandler = (e) => {\n    e.preventDefault();\n    if (window.confirm(\"Are you sure, you want to delete the profile?\")) {\n      dispatch(\n        allActions.userProfileActions.deleteProfile(\"/user/delete\", token)\n      );\n    } else return false;\n  };\n  let genderOptions = {\n    male: { label: \"Male\", selected: false },\n    female: { label: \"Female\", selected: false },\n    other: { label: \"Other\", selected: false },\n  };\n\n  const image_style = {\n    width: \"130px\",\n    height: \"130px\",\n    borderRadius: \"50%\",\n  };\n  let editForm = (\n    <EditProfile\n      reset={reset}\n      errorMessage={errorMessage}\n      handleSubmit={handleSubmit}\n      changeViewModeHandler={changeViewModeHandler}\n      fileChangeHandler={fileChangeHandler}\n      imageStyle={image_style}\n      deleteProfileHandler={deleteProfileHandler}\n      user={props.initialValues}\n      updatedImageFileURL={props.updatedImageFileURL}\n      genderOptions={genderOptions}\n    />\n  );\n  let viewForm = (\n    <ViewProfile\n      user={props.initialValues}\n      imageStyle={image_style}\n      genderOptions={genderOptions}\n    />\n  );\n\n  useEffect(() => {\n    dispatch(\n      allActions.userProfileActions.getUserProfile(\"/user/profile\", token)\n    );\n    return () => {\n      changeViewModeHandler(\"view\");\n    };\n  }, [dispatch, token]);\n  return loading ? (\n    <Loading isLoading={loading} />\n  ) : (\n    <>\n      <ProfileHeader\n        viewMode={viewMode}\n        changeViewModeHandler={changeViewModeHandler}\n      />\n      {viewMode === \"edit\" ? editForm : viewForm}\n    </>\n  );\n}\n\nconst onSubmit = (values, dispatch, props) => {\n  let { token, updatedImageFile } = props;\n  if (updatedImageFile) values.profilePic = updatedImageFile;\n  return dispatch(\n    allActions.userProfileActions.editUserProfile(\n      \"/user/profile\",\n      values,\n      token\n    )\n  ).then((res) => {\n    if (res.error) {\n      let { errors } = res.error.response.data;\n      if (errors) {\n        throw new SubmissionError(errors);\n      }\n    }\n  });\n};\n\nconst mapStateToProps = (state, props) => {\n  let {\n    user,\n    updatedImageFile,\n    updatedImageFileURL,\n    errorMessage,\n    loading,\n    viewMode,\n    successMessage: deleteSuccess,\n  } = state.userProfile;\n\n  return {\n    initialValues: user,\n    updatedImageFile: updatedImageFile,\n    updatedImageFileURL: updatedImageFileURL,\n    token: state.userProfile.token,\n    errorMessage: errorMessage,\n    loading: loading,\n    viewMode: viewMode,\n    deleteSuccess: deleteSuccess,\n    deleteError: errorMessage,\n  };\n};\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: \"editProfile\",\n    enableReinitialize: true,\n    onSubmit,\n    validate,\n  })(EditProfileCon)\n);\n"]},"metadata":{},"sourceType":"module"}