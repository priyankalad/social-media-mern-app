{"ast":null,"code":"import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useEffect}from\"react\";import{reduxForm}from\"redux-form\";import{connect,useDispatch}from\"react-redux\";import allActions from\"../redux/allActions\";import CreatePost from\"../components/CreatePost\";import validateForm from\"../formValidations/validations\";var validate=function validate(values){return validateForm(values,\"createpost\");};var CreatePostCon=function CreatePostCon(props){return/*#__PURE__*/_jsx(CreatePost,{props:props});};var onSubmit=function onSubmit(values,dispatch,props){values.postImage=props.image;dispatch(allActions.postActions.createNewPost(\"/user/post/create\",values,props.token)).then(function(res){if(!res.error)props.history.push(\"/\");});};var mapStateToProps=function mapStateToProps(state,props){var _state$post=state.post,errorMessage=_state$post.errorMessage,loading=_state$post.loading,image=_state$post.image,imageUrl=_state$post.imageUrl;return{errorMessage:errorMessage,loading:loading,token:state.userProfile.token,image:image,imageUrl:imageUrl};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{handleImageUpload:function handleImageUpload(image){console.log(image);dispatch(allActions.postActions.setImage(image));},removeImage:function removeImage(){dispatch(allActions.postActions.removeImage());}};};export default connect(mapStateToProps,mapDispatchToProps)(reduxForm({form:\"createPostForm\",onSubmit:onSubmit,validate:validate})(CreatePostCon));","map":{"version":3,"sources":["/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/containers/CreatePostCon.js"],"names":["React","useEffect","reduxForm","connect","useDispatch","allActions","CreatePost","validateForm","validate","values","CreatePostCon","props","onSubmit","dispatch","postImage","image","postActions","createNewPost","token","then","res","error","history","push","mapStateToProps","state","post","errorMessage","loading","imageUrl","userProfile","mapDispatchToProps","handleImageUpload","console","log","setImage","removeImage","form"],"mappings":"2CAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,SAAT,KAA0B,YAA1B,CACA,OAASC,OAAT,CAAkBC,WAAlB,KAAqC,aAArC,CACA,MAAOC,CAAAA,UAAP,KAAuB,qBAAvB,CACA,MAAOC,CAAAA,UAAP,KAAuB,0BAAvB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gCAAzB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,MAAD,CAAY,CAC3B,MAAOF,CAAAA,YAAY,CAACE,MAAD,CAAS,YAAT,CAAnB,CACD,CAFD,CAIA,GAAIC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,KAAD,CAAW,CAC7B,mBAAO,KAAC,UAAD,EAAY,KAAK,CAAEA,KAAnB,EAAP,CACD,CAFD,CAIA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACH,MAAD,CAASI,QAAT,CAAmBF,KAAnB,CAA6B,CAC5CF,MAAM,CAACK,SAAP,CAAmBH,KAAK,CAACI,KAAzB,CACAF,QAAQ,CACNR,UAAU,CAACW,WAAX,CAAuBC,aAAvB,CACE,mBADF,CAEER,MAFF,CAGEE,KAAK,CAACO,KAHR,CADM,CAAR,CAMEC,IANF,CAMO,SAACC,GAAD,CAAS,CACd,GAAI,CAACA,GAAG,CAACC,KAAT,CAAgBV,KAAK,CAACW,OAAN,CAAcC,IAAd,CAAmB,GAAnB,EACjB,CARD,EASD,CAXD,CAaA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAQd,KAAR,CAAkB,iBACSc,KAAK,CAACC,IADf,CAClCC,YADkC,aAClCA,YADkC,CACpBC,OADoB,aACpBA,OADoB,CACXb,KADW,aACXA,KADW,CACJc,QADI,aACJA,QADI,CAExC,MAAO,CACLF,YAAY,CAAEA,YADT,CAELC,OAAO,CAAEA,OAFJ,CAGLV,KAAK,CAAEO,KAAK,CAACK,WAAN,CAAkBZ,KAHpB,CAILH,KAAK,CAAEA,KAJF,CAKLc,QAAQ,CAAEA,QALL,CAAP,CAOD,CATD,CAWA,GAAME,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAClB,QAAD,CAAc,CACvC,MAAO,CACLmB,iBAAiB,CAAE,2BAACjB,KAAD,CAAW,CAC5BkB,OAAO,CAACC,GAAR,CAAYnB,KAAZ,EACAF,QAAQ,CAACR,UAAU,CAACW,WAAX,CAAuBmB,QAAvB,CAAgCpB,KAAhC,CAAD,CAAR,CACD,CAJI,CAKLqB,WAAW,CAAE,sBAAM,CACjBvB,QAAQ,CAACR,UAAU,CAACW,WAAX,CAAuBoB,WAAvB,EAAD,CAAR,CACD,CAPI,CAAP,CASD,CAVD,CAYA,cAAejC,CAAAA,OAAO,CACpBqB,eADoB,CAEpBO,kBAFoB,CAAP,CAIb7B,SAAS,CAAC,CACRmC,IAAI,CAAE,gBADE,CAERzB,QAAQ,CAARA,QAFQ,CAGRJ,QAAQ,CAARA,QAHQ,CAAD,CAAT,CAIGE,aAJH,CAJa,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { reduxForm } from \"redux-form\";\nimport { connect, useDispatch } from \"react-redux\";\nimport allActions from \"../redux/allActions\";\nimport CreatePost from \"../components/CreatePost\";\nimport validateForm from \"../formValidations/validations\";\n\nconst validate = (values) => {\n  return validateForm(values, \"createpost\");\n};\n\nlet CreatePostCon = (props) => {\n  return <CreatePost props={props} />;\n};\n\nconst onSubmit = (values, dispatch, props) => {\n  values.postImage = props.image;\n  dispatch(\n    allActions.postActions.createNewPost(\n      \"/user/post/create\",\n      values,\n      props.token\n    )\n  ).then((res) => {\n    if (!res.error) props.history.push(\"/\");\n  });\n};\n\nconst mapStateToProps = (state, props) => {\n  let { errorMessage, loading, image, imageUrl } = state.post;\n  return {\n    errorMessage: errorMessage,\n    loading: loading,\n    token: state.userProfile.token,\n    image: image,\n    imageUrl: imageUrl,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    handleImageUpload: (image) => {\n      console.log(image);\n      dispatch(allActions.postActions.setImage(image));\n    },\n    removeImage: () => {\n      dispatch(allActions.postActions.removeImage());\n    },\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(\n  reduxForm({\n    form: \"createPostForm\",\n    onSubmit,\n    validate,\n  })(CreatePostCon)\n);\n"]},"metadata":{},"sourceType":"module"}