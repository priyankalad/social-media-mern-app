{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/containers/ResetPassCon.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { reduxForm, SubmissionError } from \"redux-form\";\nimport allActions from \"../redux/allActions\";\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport validateForm from \"../formValidations/validations\";\nimport ResetPassword from \"../components/ResetPassword\";\n\nconst validate = values => {\n  return validateForm(values, \"resetpassword\");\n};\n\nlet ResetPassCon = props => {\n  _s();\n\n  let {\n    errorMessage,\n    loading,\n    successMessage,\n    username\n  } = props;\n  let dispatch = useDispatch();\n  useEffect(() => {\n    return () => {\n      dispatch(allActions.forgotPassActions.clearUsername());\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ResetPassword, {\n    reduxFormProps: props,\n    loading: loading,\n    errorMessage: errorMessage,\n    successMessage: successMessage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResetPassCon, \"rAh3tY+Iv6hWC9AI4Dm+rCbkwNE=\", false, function () {\n  return [useDispatch];\n});\n\n_c = ResetPassCon;\n\nfunction mapStateToProps(state) {\n  let {\n    resetPass: {\n      errorMessage,\n      successMessage,\n      loading\n    },\n    forgotPass: {\n      username\n    }\n  } = state;\n  return {\n    errorMessage: errorMessage,\n    successMessage: successMessage,\n    loading: loading,\n    username: username\n  };\n}\n\nfunction onSubmit(values, dispatch, props) {\n  values.username = props.username;\n  return dispatch(allActions.resetPassActions.resetPassword(\"/reset-password\", values)).then(res => {\n    if (res.error) {\n      let {\n        errors\n      } = res.error.response.data;\n\n      if (errors) {\n        throw new SubmissionError(errors);\n      }\n    } else {\n      dispatch(props.reset(\"resetPasswordForm\"));\n      dispatch(allActions.forgotPassActions.clearUsername());\n    }\n  });\n}\n\nexport default connect(mapStateToProps)(reduxForm({\n  form: \"resetPasswordForm\",\n  onSubmit,\n  validate\n})(ResetPassCon));\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassCon\");","map":{"version":3,"sources":["/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/containers/ResetPassCon.js"],"names":["React","useEffect","reduxForm","SubmissionError","allActions","useSelector","useDispatch","connect","validateForm","ResetPassword","validate","values","ResetPassCon","props","errorMessage","loading","successMessage","username","dispatch","forgotPassActions","clearUsername","mapStateToProps","state","resetPass","forgotPass","onSubmit","resetPassActions","resetPassword","then","res","error","errors","response","data","reset","form"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,SAAT,EAAoBC,eAApB,QAA2C,YAA3C;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,OAAnC,QAAkD,aAAlD;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AAC3B,SAAOH,YAAY,CAACG,MAAD,EAAS,eAAT,CAAnB;AACD,CAFD;;AAGA,IAAIC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC5B,MAAI;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA,cAAzB;AAAyCC,IAAAA;AAAzC,MAAsDJ,KAA1D;AACA,MAAIK,QAAQ,GAAGZ,WAAW,EAA1B;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXiB,MAAAA,QAAQ,CAACd,UAAU,CAACe,iBAAX,CAA6BC,aAA7B,EAAD,CAAR;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,sBACE,QAAC,aAAD;AACE,IAAA,cAAc,EAAEP,KADlB;AAEE,IAAA,OAAO,EAAEE,OAFX;AAGE,IAAA,YAAY,EAAED,YAHhB;AAIE,IAAA,cAAc,EAAEE;AAJlB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAjBD;;GAAIJ,Y;UAEaN,W;;;KAFbM,Y;;AAmBJ,SAASS,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,MAAI;AACFC,IAAAA,SAAS,EAAE;AAAET,MAAAA,YAAF;AAAgBE,MAAAA,cAAhB;AAAgCD,MAAAA;AAAhC,KADT;AAEFS,IAAAA,UAAU,EAAE;AAAEP,MAAAA;AAAF;AAFV,MAGAK,KAHJ;AAIA,SAAO;AACLR,IAAAA,YAAY,EAAEA,YADT;AAELE,IAAAA,cAAc,EAAEA,cAFX;AAGLD,IAAAA,OAAO,EAAEA,OAHJ;AAILE,IAAAA,QAAQ,EAAEA;AAJL,GAAP;AAMD;;AAED,SAASQ,QAAT,CAAkBd,MAAlB,EAA0BO,QAA1B,EAAoCL,KAApC,EAA2C;AACzCF,EAAAA,MAAM,CAACM,QAAP,GAAkBJ,KAAK,CAACI,QAAxB;AACA,SAAOC,QAAQ,CACbd,UAAU,CAACsB,gBAAX,CAA4BC,aAA5B,CAA0C,iBAA1C,EAA6DhB,MAA7D,CADa,CAAR,CAELiB,IAFK,CAECC,GAAD,IAAS;AACd,QAAIA,GAAG,CAACC,KAAR,EAAe;AACb,UAAI;AAAEC,QAAAA;AAAF,UAAaF,GAAG,CAACC,KAAJ,CAAUE,QAAV,CAAmBC,IAApC;;AACA,UAAIF,MAAJ,EAAY;AACV,cAAM,IAAI5B,eAAJ,CAAoB4B,MAApB,CAAN;AACD;AACF,KALD,MAKO;AACLb,MAAAA,QAAQ,CAACL,KAAK,CAACqB,KAAN,CAAY,mBAAZ,CAAD,CAAR;AACAhB,MAAAA,QAAQ,CAACd,UAAU,CAACe,iBAAX,CAA6BC,aAA7B,EAAD,CAAR;AACD;AACF,GAZM,CAAP;AAaD;;AAED,eAAeb,OAAO,CAACc,eAAD,CAAP,CACbnB,SAAS,CAAC;AACRiC,EAAAA,IAAI,EAAE,mBADE;AAERV,EAAAA,QAFQ;AAGRf,EAAAA;AAHQ,CAAD,CAAT,CAIGE,YAJH,CADa,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { reduxForm, SubmissionError } from \"redux-form\";\nimport allActions from \"../redux/allActions\";\nimport { useSelector, useDispatch, connect } from \"react-redux\";\nimport validateForm from \"../formValidations/validations\";\nimport ResetPassword from \"../components/ResetPassword\";\n\nconst validate = (values) => {\n  return validateForm(values, \"resetpassword\");\n};\nlet ResetPassCon = (props) => {\n  let { errorMessage, loading, successMessage, username } = props;\n  let dispatch = useDispatch();\n  useEffect(() => {\n    return () => {\n      dispatch(allActions.forgotPassActions.clearUsername());\n    };\n  }, []);\n\n  return (\n    <ResetPassword\n      reduxFormProps={props}\n      loading={loading}\n      errorMessage={errorMessage}\n      successMessage={successMessage}\n    />\n  );\n};\n\nfunction mapStateToProps(state) {\n  let {\n    resetPass: { errorMessage, successMessage, loading },\n    forgotPass: { username },\n  } = state;\n  return {\n    errorMessage: errorMessage,\n    successMessage: successMessage,\n    loading: loading,\n    username: username,\n  };\n}\n\nfunction onSubmit(values, dispatch, props) {\n  values.username = props.username;\n  return dispatch(\n    allActions.resetPassActions.resetPassword(\"/reset-password\", values)\n  ).then((res) => {\n    if (res.error) {\n      let { errors } = res.error.response.data;\n      if (errors) {\n        throw new SubmissionError(errors);\n      }\n    } else {\n      dispatch(props.reset(\"resetPasswordForm\"));\n      dispatch(allActions.forgotPassActions.clearUsername());\n    }\n  });\n}\n\nexport default connect(mapStateToProps)(\n  reduxForm({\n    form: \"resetPasswordForm\",\n    onSubmit,\n    validate,\n  })(ResetPassCon)\n);\n"]},"metadata":{},"sourceType":"module"}