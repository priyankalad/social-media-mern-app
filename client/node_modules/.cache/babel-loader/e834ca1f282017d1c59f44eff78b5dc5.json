{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/containers/RegisterCon.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { reduxForm, SubmissionError } from \"redux-form\";\nimport allActions from \"../redux/allActions\";\nimport Register from \"../components/Register\";\nimport validateForm from \"../formValidations/validations\";\n\nconst validate = values => {\n  return validateForm(values, \"register\");\n};\n\nlet RegisterCon = props => {\n  _s();\n\n  const {\n    errorMessage,\n    successMessage,\n    loading\n  } = useSelector(({\n    register: {\n      errorMessage,\n      successMessage,\n      loading\n    }\n  }) => ({\n    errorMessage,\n    successMessage,\n    loading\n  }));\n  return /*#__PURE__*/_jsxDEV(Register, {\n    loading: loading,\n    reduxFormProps: props,\n    errorMessage: errorMessage,\n    successMessage: successMessage\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterCon, \"RJEJpU4D1pgulaKT7om88vlmfiE=\", false, function () {\n  return [useSelector];\n});\n\n_c = RegisterCon;\n\nconst onSubmit = (values, dispatch, props) => {\n  return dispatch(allActions.registerActions.registerUser(\"/register\", values)).then(res => {\n    if (res.error) {\n      let {\n        errors\n      } = res.error.response.data;\n\n      if (errors) {\n        throw new SubmissionError(errors);\n      }\n    } else {\n      dispatch(props.reset(\"registerForm\"));\n    }\n  });\n};\n\nexport default reduxForm({\n  form: \"registerForm\",\n  onSubmit,\n  validate\n})(RegisterCon);\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterCon\");","map":{"version":3,"sources":["/Users/priyanka/Study/MERNProjects/social-media-app-mern/client/src/containers/RegisterCon.js"],"names":["React","useSelector","reduxForm","SubmissionError","allActions","Register","validateForm","validate","values","RegisterCon","props","errorMessage","successMessage","loading","register","onSubmit","dispatch","registerActions","registerUser","then","res","error","errors","response","data","reset","form"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,SAAT,EAAoBC,eAApB,QAA2C,YAA3C;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;;AAEA,MAAMC,QAAQ,GAAIC,MAAD,IAAY;AAC3B,SAAOF,YAAY,CAACE,MAAD,EAAS,UAAT,CAAnB;AACD,CAFD;;AAIA,IAAIC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA,cAAhB;AAAgCC,IAAAA;AAAhC,MAA4CZ,WAAW,CAC3D,CAAC;AAAEa,IAAAA,QAAQ,EAAE;AAAEH,MAAAA,YAAF;AAAgBC,MAAAA,cAAhB;AAAgCC,MAAAA;AAAhC;AAAZ,GAAD,MAA8D;AAC5DF,IAAAA,YAD4D;AAE5DC,IAAAA,cAF4D;AAG5DC,IAAAA;AAH4D,GAA9D,CAD2D,CAA7D;AAQA,sBACE,QAAC,QAAD;AACE,IAAA,OAAO,EAAEA,OADX;AAEE,IAAA,cAAc,EAAEH,KAFlB;AAGE,IAAA,YAAY,EAAEC,YAHhB;AAIE,IAAA,cAAc,EAAEC;AAJlB;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAjBD;;GAAIH,W;UACgDR,W;;;KADhDQ,W;;AAmBJ,MAAMM,QAAQ,GAAG,CAACP,MAAD,EAASQ,QAAT,EAAmBN,KAAnB,KAA6B;AAC5C,SAAOM,QAAQ,CACbZ,UAAU,CAACa,eAAX,CAA2BC,YAA3B,CAAwC,WAAxC,EAAqDV,MAArD,CADa,CAAR,CAELW,IAFK,CAECC,GAAD,IAAS;AACd,QAAIA,GAAG,CAACC,KAAR,EAAe;AACb,UAAI;AAAEC,QAAAA;AAAF,UAAaF,GAAG,CAACC,KAAJ,CAAUE,QAAV,CAAmBC,IAApC;;AACA,UAAIF,MAAJ,EAAY;AACV,cAAM,IAAInB,eAAJ,CAAoBmB,MAApB,CAAN;AACD;AACF,KALD,MAKO;AACLN,MAAAA,QAAQ,CAACN,KAAK,CAACe,KAAN,CAAY,cAAZ,CAAD,CAAR;AACD;AACF,GAXM,CAAP;AAYD,CAbD;;AAeA,eAAevB,SAAS,CAAC;AACvBwB,EAAAA,IAAI,EAAE,cADiB;AAEvBX,EAAAA,QAFuB;AAGvBR,EAAAA;AAHuB,CAAD,CAAT,CAIZE,WAJY,CAAf","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { reduxForm, SubmissionError } from \"redux-form\";\nimport allActions from \"../redux/allActions\";\nimport Register from \"../components/Register\";\nimport validateForm from \"../formValidations/validations\";\n\nconst validate = (values) => {\n  return validateForm(values, \"register\");\n};\n\nlet RegisterCon = (props) => {\n  const { errorMessage, successMessage, loading } = useSelector(\n    ({ register: { errorMessage, successMessage, loading } }) => ({\n      errorMessage,\n      successMessage,\n      loading,\n    })\n  );\n\n  return (\n    <Register\n      loading={loading}\n      reduxFormProps={props}\n      errorMessage={errorMessage}\n      successMessage={successMessage}\n    />\n  );\n};\n\nconst onSubmit = (values, dispatch, props) => {\n  return dispatch(\n    allActions.registerActions.registerUser(\"/register\", values)\n  ).then((res) => {\n    if (res.error) {\n      let { errors } = res.error.response.data;\n      if (errors) {\n        throw new SubmissionError(errors);\n      }\n    } else {\n      dispatch(props.reset(\"registerForm\"));\n    }\n  });\n};\n\nexport default reduxForm({\n  form: \"registerForm\",\n  onSubmit,\n  validate,\n})(RegisterCon);\n"]},"metadata":{},"sourceType":"module"}